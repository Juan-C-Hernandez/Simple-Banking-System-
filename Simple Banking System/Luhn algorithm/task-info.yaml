type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |
    package banking;

    import banking.view.Menu;

    public class Main {
        public static void main(String[] args) {
            new Menu().start();
        }
    }
  learner_created: false
- name: src/banking/model/Card.java
  visible: true
  text: |
    package banking.model;

    import banking.LuhnAlgorithm;

    public class Card {
        private int bin;
        private long accountId;
        private int checkSum;
        private String cardNumber;
        private int pin;
        private int yearExp;
        private int monthExp;

        public Card(int bin, long accountId) {
            StringBuilder sb = new StringBuilder();
            this.bin = bin;
            this.accountId = accountId;
            sb.append(bin).append(accountId);
            checkSum = LuhnAlgorithm.luhnCheckSumDigit(sb.toString());
            sb.append(checkSum);
            cardNumber = sb.toString();
            pin = (int) (1000 + Math.random() *8999);
        }

        public int getBin() {
            return bin;
        }

        public long getAccountId() {
            return accountId;
        }

        public int getCheckSum() {
            return checkSum;
        }

        public int getPin() {
            return pin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public void setCardNumber(String cardNumber) {
            this.cardNumber = cardNumber;
        }

        @Override
        public String toString() {
            return "Card number: " + cardNumber + System.lineSeparator()
                + "Pin: " + pin;
        }
    }
  learner_created: false
- name: src/banking/model/Bank.java
  visible: true
  text: |
    package banking.model;

    public class Bank {
        private String name;
        private int bin;

        public Bank(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getBin() {
            return bin;
        }

        public void setBin(int bin) {
            this.bin = bin;
        }
    }
  learner_created: false
- name: src/banking/model/User.java
  visible: true
  text: |
    package banking.model;

    public class User {
        private String name;
        private Card card;
        private long balance;

        public User(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Card getCard() {
            return card;
        }

        public void setCard(Card card) {
            this.card = card;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }
    }
  learner_created: false
- name: src/banking/view/Menu.java
  visible: true
  text: |
    package banking.view;

    import banking.ConsoleHelper;
    import banking.model.Card;
    import banking.model.User;

    import java.util.ArrayList;
    import java.util.List;

    public class Menu {
        private ConsoleHelper consoleHelper = ConsoleHelper.getInstance();
        private final String ln = System.lineSeparator();
        private final String mainMenuString = "1. Create an account" + ln +
                "2. Log into account" + ln +
                "0. Exit" + ln;

        private final String userMenuString = "1. Balance" + ln +
                "2. Log out" + ln +
                "0. Exit" + ln;

        private User currentUser;
        private List<User> users = new ArrayList<>();

        public void start() {
            mainMenu();
        }

        public void mainMenu() {
            int choice = consoleHelper.readInt(mainMenuString);
            switch (choice) {
                case 1:
                    System.out.println("");
                    User newUser = new User("");
                    long n = (long) (100000000 + Math.random() * 900000000);
                    Card newCard = new Card(400000, n);
                    newUser.setCard(newCard);
                    users.add(newUser);
                    System.out.println("Your card has been created");
                    System.out.println("Your card number:");
                    System.out.println(newCard.getCardNumber());
                    System.out.println("Your card PIN:");
                    System.out.println(newCard.getPin() + ln);
                    mainMenu();
                    break;
                case 2:
                    String cardNumber = consoleHelper.readString("Enter your card number: " + ln);
                    int pin = consoleHelper.readInt("Enter your PIN:");
                    for (User user : users) {
                        if (user.getCard().getCardNumber().equals(cardNumber) && user.getCard().getPin() == pin) {
                            currentUser = user;
                        }
                    }
                    if (currentUser == null) {
                        System.out.println("Wrong card number or PIN!" + ln);
                        mainMenu();
                    } else {
                        System.out.println("You have successfully logged in!" + ln);
                        userMenu();
                    }
                    break;
                case 0:
                    System.out.println("Bye!");
                    System.exit(0);
                default:
                    System.out.println("Wrong input");
            }
        }

        public void userMenu() {
            int choice = consoleHelper.readInt(userMenuString);
            switch (choice) {
                case 1:
                    System.out.println("Balance: " + currentUser.getBalance() + ln);
                    userMenu();
                    break;
                case 2:
                    currentUser = null;
                    System.out.println("You have successfully logged out!" + ln);
                    mainMenu();
                    break;
                case 0:
                    System.out.println("Bye!");
                    System.exit(0);
                default:
                    System.out.println("Wrong input");
                    userMenu();
            }
        }

    }
  learner_created: false
- name: src/banking/ConsoleHelper.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class ConsoleHelper {
        private static final ConsoleHelper instance = new ConsoleHelper();
        private final Scanner scanner = new Scanner(System.in);

        private ConsoleHelper() {}

        public static ConsoleHelper getInstance() {
            return instance;
        }

        public String readString(String message) {
            System.out.print(message);
            return scanner.nextLine();
        }

        public int readInt(String message) {
            System.out.println(message);
            return Integer.parseInt(scanner.nextLine());
        }

        public void close() {
            scanner.close();
        }
    }
  learner_created: false
- name: src/banking/LuhnAlgorithm.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class LuhnAlgorithm {
        public static int luhnSum(String num) {
            int sum = 0;
            int digit;
            for(int i = num.length() - 1; i >= 0; i--) {
                digit = Character.digit(num.charAt(i), 10);
                if (i % 2 != 0) {
                    digit = (Character.digit(num.charAt(i), 10) * 2);
                    digit = digit > 9 ? digit - 9 : digit;
                }
                sum += digit;
            }

            return sum;
        }

        public static boolean checkLuhnNumber(String cardNumber) {
            return luhnSum(cardNumber) % 10 == 0;
        }

        public static int luhnCheckSumDigit(String cardNumber) {
            int digit = 10 - (luhnSum(cardNumber) % 10);
            return digit == 10 ? 0 : digit;
        }

        public static void main(String[] args) {
            Scanner s = new Scanner(System.in);
            String cn = s.nextLine();
            int cs = luhnCheckSumDigit(cn);
            System.out.println(cs);
            System.out.println(cn + " " + cs);
            System.out.println(checkLuhnNumber(cn + "" + cs));
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class SimpleBankSystemTest extends StageTest {


        public SimpleBankSystemTest() {
            super(Main.class);
        }

        private static String correctCardNumber = "";
        private static String correctPin = "";
        private static String incorrectCardNumber = "";
        private static String incorrectPin = "";
        private static boolean isCompleted = false;

        @Override
        public List<TestCase> generate() {
            return List.of(
                //Check card credentials
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "1";
                    })
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }

                        String anotherCardNumber = cardNumberMatcher.group();

                        if (anotherCardNumber.equals(correctCardNumber)) {
                            return new CheckResult(false, "Your program generates two identical card numbers!");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in and log out
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should be signed in after " +
                                "entering the correct card information.");
                        }

                        return "2";
                    })
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("create an account")) {
                            return new CheckResult(false, "The user should be logged out after choosing 'Log out' option");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in with wrong PIN
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example!");
                        }

                        correctCardNumber = cardNumberMatcher.group();
                        correctPin = pinMatcher.group();

                        Random random = new Random();

                        incorrectPin = correctPin;

                        while (correctPin.equals(incorrectPin)) {
                            incorrectPin = String.valueOf(1000 + random.nextInt(8999));
                        }

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + incorrectPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed in after" +
                                " entering incorrect card information.");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in to not existing account
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number " +
                                "and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        Random random = new Random();

                        incorrectCardNumber = correctCardNumber;

                        while (correctCardNumber.equals(incorrectCardNumber)) {
                            incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
                        }

                        return "2";
                    })
                    .addInput(output -> incorrectCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed" +
                                " in after entering the information of a non-existing card.");
                        }

                        isCompleted = true;
                        return "0";
                    }),

                // Check balance
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> "1")
                    .addInput(output -> {
                        if (!output.toString().contains("0")) {
                            return new CheckResult(false, "Expected balance: 0");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check Luhn algorithm
                new TestCase()
                    .setInput("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        boolean isSomeCardFound = false;
                        int foundCards = 0;

                        while (cardNumberMatcher.find()) {

                            foundCards++;

                            if (!isSomeCardFound) {
                                isSomeCardFound = true;
                            }

                            String cardNumber = cardNumberMatcher.group();

                            if (!checkLuhnAlgorithm(cardNumber)) {
                                return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                            }
                        }

                        if (!isSomeCardFound) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        if (foundCards != 20) {
                            return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
                        }

                        isCompleted = true;
                        return "0";
                    })
            );
        }

        @Override
        public CheckResult check(String reply, Object attach) {
            if (!isCompleted)
                return new CheckResult(false, "Looks like your program unexpectedly terminated without choosing 'exit' item");
            else
                isCompleted = false;
            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/93/stages/516/implement
status: Solved
record: 1
